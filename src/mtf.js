const puppeteer = require("puppeteer-extra");
// Add stealth plugin and use defaults (all tricks to hide puppeteer usage)
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
puppeteer.use(StealthPlugin());
const fs = require("fs");
const path = require("path");
const budgie = require("./budgie");
const util = require("./util");
const moment = require("moment");
const sharp = require("sharp");
const homedir = require("os").homedir();
const SMS = require("./sms");
const email = require("./email");
const totp = require("totp-generator");
const { default: axios } = require("axios");

let page;
let data;
let counter = 0;

const config = [
  {
    name: "home",
    url: "https://www.motawif.com.sa/",
    regex: "https://www.motawif.com.sa/home/[a-z]{2}-[a-z]{2}$",
    controller: {
      selector: "body > header > div > div",
      action: async () => {
        const selectedTraveler = await page.$eval(
          "#hajonsoft_select",
          (el) => el.value
        );
        if (selectedTraveler) {
          fs.writeFileSync("./selectedTraveller.txt", selectedTraveler);
          const data = fs.readFileSync("./data.json", "utf-8");
          var passengersData = JSON.parse(data);
          const passenger = passengersData.travellers[selectedTraveler];
          await page.type("#FirstName", passenger.name.first);
          await page.type("#LastName", passenger.name.last);
          await page.type(
            "#Email",
            passenger.name.first + passenger.name.last + "@gmail.com"
          );
          await page.type("#PhoneNumber", moment().format("9MMDDHHmmss"));
          await util.commit(page, [
            {
              selector: "#cor",
              value: () => budgie.get("motawif_country_of_residence", "US"),
            },
          ]);
        }
      },
    },
  },
  {
    name: "thankyou",
    url: "https://www.motawif.com.sa/home/en-sa/thankyou",
  },
];

async function send(sendData) {
  data = sendData;
  page = await util.initPage(config, onContentLoaded);
  await page.goto(config[0].url, { waitUntil: "domcontentloaded" });
}

async function onContentLoaded(res) {
  counter = util.useCounter(counter);
  if (counter >= data?.travellers?.length) {
    return;
  }
  const currentConfig = util.findConfig(await page.url(), config);
  try {
    await pageContentHandler(currentConfig);
  } catch (err) {
    console.log(err);
  }
}

async function pageContentHandler(currentConfig) {
  const passenger = data.travellers[counter];
  switch (currentConfig.name) {
    case "home":
      const acceptCookiesButton = await page.$("body > div.cky-consent-container.cky-classic-bottom > div.cky-consent-bar > div.cky-notice > div > div.cky-notice-btn-wrapper > button.cky-btn.cky-btn-accept");
      if (acceptCookiesButton) {
        await acceptCookiesButton.click();
      }
      await util.controller(page, currentConfig, data.travellers);
      await util.commander(page, {
        controller: {
          selector:
            "body > div.hero__section > div > div > div.hero__info > p:nth-child(3)",
          title: "Remember",
          arabicTitle: "تذكر",
          action: async () => {
            const cor = await page.$eval("#cor", (el) => el.value);
            if (cor) {
              budgie.save("motawif_country_of_residence", cor);
            }
          },
        },
      });
      break;
    case "index":
      try {
        const anchors = await page.$$eval("a", (els) => {
          return els.map((el) => el.removeAttribute("target"));
        });
      } catch {}
      break;
    case "login":
      await util.commit(page, currentConfig.details, data.system);
      if (data.system.username && data.system.password) {
        const loginButton = await page.$x(
          "/html/body/div[2]/div[2]/div/div[2]/div/form/div[4]/div/input"
        );
        if (
          loginButton &&
          Array.isArray(loginButton) &&
          loginButton.length > 0
        ) {
          loginButton[0].click();
        }
      }
      break;
    case "otp":
      // if ((await page.$(".insecure-form")) !== null) {
      //   await page.click("#proceed-button");
      //   await page.waitForNavigation({ waitUntil: "networkidle0" });
      // }
      const messageSelector = "#mobileVerForm > h5";
      await page.waitForSelector(messageSelector);
      const message = await page.$eval(messageSelector, (el) => el.innerText);
      if (
        (message.includes("generated by Google Authenticator") ||
          message.includes("vérification généré par Google Authenticator") ||
          message.includes("ديك في تطبيق Google Authenticator")) &&
        data.system.ehajCode
      ) {
        const token = totp(data.system.ehajCode);
        await page.type("#code", token);
        const submitButton = await page.$x(
          "/html/body/div[1]/div[2]/div[1]/form/div[2]/div/div/input[1]"
        );
        if (
          submitButton &&
          Array.isArray(submitButton) &&
          submitButton.length > 0
        ) {
          submitButton[0].click();
        }
      }

      break;
    case "profile-verification":
      await page.waitForSelector("#code");
      // #j_idt3421 > div.modal-body > div > h5
      if (data.system.ehajCode) {
        const token = totp(data.system.ehajCode);
        await page.type("#code", token);
      }
      break;
    case "profile":
      // TODO: Check if this code is working fine
      await page.waitForSelector("#secretKey");
      const secretCode = await page.$eval("#secretKey", (el) => el.value);
      console.log(
        "%c 🥃 secretCode: ",
        "font-size:20px;background-color: #2EAFB0;color:#fff;",
        secretCode
      );
      const token = totp(secretCode);
      await page.type("#tokenValue", token);
      await page.click("#verifyGAuthToken > div > div.col-lg-4 > a");
      // Save to firebase
      const config = {
        headers: { Authorization: `Bearer ${data.info.accessToken}` },
      };
      const url = `${data.info.databaseURL}/protected/profile//.json`;
      try {
        await axios.patch(
          url,
          {
            ehajCode: secretCode,
          },
          config
        );
      } catch (err) {
        console.log(err);
      }

      break;
    case "thankyou":
      await page.goto("https://www.motawif.com.sa");
      break;

    default:
      break;
  }
}

module.exports = { send };
